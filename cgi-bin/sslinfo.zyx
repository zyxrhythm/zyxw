#!/bin/bash
#This script was created by Zyx Rhythm (email:zyxrhythm@gmail.com)
#You can download, copy and use it as you see fit.
#If ever you need to post or show the code to people
#Though you are not required to, crediting the the author will be much appreciated.
################################################
#https://github.com/zyxrhythm
#############################################

SITEBANNER=$(cat ../zyx/site.vars | gawk '/<-SITE_BANNER/{flag=1;next}/SITE_BANNER->/{flag=0}flag');
DIP=$(cat ../zyx/site.vars | gawk '/<-DIP/{flag=1;next}/DIP->/{flag=0}flag');
SSLC=$(cat ../zyx/site.vars | gawk '/<-SSLCHECK/{flag=1;next}/SSLCHECK->/{flag=0}flag');
WHOIS=$(cat ../zyx/site.vars | gawk '/<-WHOIS/{flag=1;next}/WHOIS->/{flag=0}flag');
DIGGER=$(cat ../zyx/site.vars | gawk '/<-DIGGER/{flag=1;next}/DIGGER->/{flag=0}flag');
GANALYTICS=$(cat ../zyx/ganalytics.txt);

#start the html header
echo "Content-type: text/html"
echo ""

#stores the string from bbc.sh to a variable converts all uppercase to lowercase
qs=$(echo "$QUERY_STRING" | awk '{print tolower($0)}');

#get the domain from qs
domain=$(echo "$qs" | cut -f2 -d"=" );

echo "<!DOCTYPE html>
<html>
<title>SSL Cert Checker</title>"

cat <<EOHTMLHEAD
<head>
<link rel="icon" type="image/png" href="/icon.png" />

<meta name="description" content="$SITEBANNER is a website that can look up the whois information of a domain from whois servers, dig DNS records of domains and sub domains from name servers, etc...">
<meta name="keywords" content="DIG, DNS, WHOIS, SSL CHECK">
<meta name="author" content="Zyx Rhythm">
 
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<link rel="stylesheet" type="text/css" href="/css/sslinfo.css">
$GANALYTICS
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js'></script>
<script src="/js/allowedchars.js"></script>
<script src="/js/gencopy.js"></script>



<script> 
function jsxtable() { var x = document.getElementById('xtable'); 
if (x.style.display === 'none') 
{ x.style.display = 'inline'; } 
else { x.style.display = 'none'; } } 
</script>

<script> 
function jsx2table() { var x = document.getElementById('navtable'); 
if (x.style.display === 'none') 
{ x.style.display = 'inline'; } 
else { x.style.display = 'none'; } } 
</script>

<script> 
function jsxmenu() { var x = document.getElementById('navmenu'); 
if (x.style.display === 'none') 
{ x.style.display = 'inline'; } 
else { x.style.display = 'none'; } } 
</script>

<p><a href="/cgi-bin/home.zyx" style='float:left'>[ &#127968;Home ]</a>
<div id='navtable' style='display:none; float:right;' >
<a style='font-size: 126%; cursor: pointer; float:right; ' onclick='jsxtable(); jsx2table(); jsxmenu()' > &#9776;</a>
<br><br>
<table id='navlinkz'> <tbody>
<tr><td><a href='/cgi-bin/dip.zyx' >&#8625; $DIP &#8626;</a></td></tr>
</tbody></table><br>
<table id='navlinkz'> <tbody>
<tr><td><a href='/cgi-bin/whois.zyx' >&#8625; $WHOIS &#8626;</a></td></tr>
</tbody></table><br>
<table id='navlinkz'> <tbody>
<tr><td><a href='/cgi-bin/sslinfo.zyx' >&#8625; $SSLC &#8626;</a></td></tr>
</tbody></table><br>
<table id='navlinkz'> <tbody>
<tr><td><a href='/cgi-bin/digger.zyx' >&#8625; $DIGGER &#8626;</a></td></tr>
</tbody></table><br>
</div>

<div id='navmenu' >
<a style='color:tomato; cursor: pointer; font-size:126%; float:right;' onclick='jsxtable(); jsx2table(); jsxmenu();'> &#9776; </a>
</div>

<br><br>

<div id='xtable' ><table> <tbody> <td>
<form action="/cgi-bin/sslinfo.zyx" method="get">
<input placeholder="Domain / sub domain"  type="text" onblur="this.value=removeSpaces(this.value); this.value=removeSpecialCharacters(this.value);" onKeyDown="if(event.keyCode==13) this.value=removeSpaces(this.value); if(event.keyCode==13) this.value=removeSpecialCharacters(this.value);" onKeyUp="if(event.keyCode==13) this.value=removeSpecialCharacters(this.value);"name="domain">
<button type="submit" >Go 2</button>
</form>
</td> </tbody> </table> </div></p>

<button onclick="copyClipboard()" >Copy Results</button> <label class="tooltip"> &#128072; &nbsp; &nbsp;<span class='tooltiptext' style='font-size: 95%; font-family: calibri; font: green; '> <br> Click the button to copy the results - then simply do a "paste" on your text editor or note taking app.<br><br></span></label> 
&nbsp;
<a style='color:tomato; cursor: pointer; font-size: 116%; font-family:verdana;' value="Refresh Page" onClick="window.location.href=window.location.href">&#8635;<span style="font-size: 77%;">Refresh Results</span></a>

<hr>
</head>
EOHTMLHEAD

TLDLISTX=$(cat ../zyx/tldlistx.txt | tr -d '\040\011\012\015');
TLDLISTG=$(cat ../zyx/tldlistg.txt | tr -d '\040\011\012\015');
TLDLIST0=$(cat ../zyx/tldlist0.txt | tr -d '\040\011\012\015');

ALLTLD="$TLDLISTX$TLDLISTG$TLDLIST0";

#list of supported gtlds
shopt -s extglob
tldlist0="+($ALLTLD)"

#list of supported ccTLDs
tldlist1='+(ac|ad|ae|af|ag|ai|al|am|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cw|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sk|sl|sm|sn|so|sr|ss|st|sv|sx|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tr|tt|tv|tw|tz|ua|ug|uk|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|za|zm|zw)'

#===================
#FUNCTION HALL
#===================

#uses openssl to determine the issuer of SSL the target domain and the expiration for gtlds
errcfunc () {
err=$(nmap "$1" -oX - -p 443 --script=ssl-cert | grep -i -e 'commonname' );
echo "$err";
}

issuerfunc () {
issuer0=$(echo "$1" | grep -i 'issuer=' );
issuer=$( grep -oP '(?<=/O=).*?(?=/)' <<< "$issuer0");
echo "$issuer";
}

targetfunc () {
target0=$( echo "$1" | grep -i 'subject=' );
target=${target0#*CN=};
echo "$target";
}

expiryfunc () {
expiry0=$(echo "$1" | grep -i 'notafter=');
expiry=${expiry0#*After=};
echo "$expiry";
}

validstartfunc () {
validstart0=$(echo "$1" | grep -i 'notbefore=');
validstart=${validstart0#*Before=};
echo "$validstart";
}

daysleftfunc () {
Expiryx="$1"
#year
dlyear0="${Expiryx:13:10}";
dlyear=$(grep -oP '(?<= ).*?(?= )' <<< "$dlyear0")
#month alpha
dlmonth=$( echo "${Expiryx:0:3}" | awk '{print tolower($0)}' );
#month num
case $dlmonth in jan) dlmono='1';; feb) dlmono='2';; mar) dlmono='3';; apr) dlmono='4';; may) dlmono='5';; jun) dlmono='6';; jul) dlmono='7';; aug) dlmono='8';; sep) dlmono='9';; oct) dlmono='10';; nov) dlmono='11';; dec) dlmono='12';; *) dlmono='0';;
esac;
#day
dlday0="${Expiryx:0:9}";
dlday=$(grep -oP '(?<= ).*?(?= )' <<< "$dlday0");
#full date
fulldate="$dlyear-$dlmono-$dlday";

daysleft=$( echo $((($(date +%s --date "$fulldate")-$(date +%s))/(3600*24))) );

echo "$daysleft";
}
#===================
#END OF FUNCTION HALL
#===================

echo '<br>'

#checks if input is null 
if [[ -z "$domain" ]]; then

cat <<EOTSE
<body>
<div id="divClipboard">
<p><strong>Current Input</strong> : none <br> <br>
Enter a valid domain name <a href='https://en.wikipedia.org/wiki/Fully_qualified_domain_name' target='_blank'>(FQDN)</a> / sub domain.<br><br>S.C.C. (SSL Certificate Checker)<br><br><a href='https://www.openssl.org' target='_blank'>OPENSSL</a> and <a href='https://en.wikipedia.org/wiki/Nmap' target='_blank' >NMAP</a> will fetch details about the SSL certificate issued for a domain / sub domain by querying port 443 of the domain / sub domain's web server.</p>
</div>
<p style='color: red; text-decoration: none; font-family: calibri'><small><<</small><input type='button' style='background:none; border:none; font-size:95%; color: red;' value='back | track' onClick='history.go(-1);'></p>
</body>
</html>
EOTSE
exit 0;

else

IP0=$(dig +short a $domain );

iponlyfunc () {
while IFS= read -r line
do
if [[ "$line" =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]]; 
then ipop="$line";
else 
linex=$(dig a +short "$line" ); 
ipop="$line (CNAME) <br> <br>The CNAME resolves to $linex"; 
fi;
echo "$ipop";
done < <(printf '%s\n' "$1");
}

IP=$( iponlyfunc "$IP0" | head -n 1);

if [[ -z "$IP" ]] || [[ "$IP" = " " ]]; 

then cat << ZXCVBNM
<body>
<div id='divClipboard'>
<p><strong>Input:</strong> $domain <br> <br>
<span style="font-size: 120%; font-family: verdana; color: red; ">Error!!</span><br><br>
Input does not resolve to an IP address (check the input syntax / check the DNS).<br></p>
</div>
<hr><br>
<p style='color: red; text-decoration: none; font-family: calibri'><small><<</small><input type='button' style='background:none; border:none; font-size:95%; color: red;' value='back | track' onClick='history.go(-1);'></p>
</body>
</html>
ZXCVBNM

exit 0; 

else true; fi;

#cuts and extracts the TLD
tld=$( echo "$domain" | rev | cut -d "." -f1 | rev );

#checks if the domain is a gtld
case $tld in
 $tldlist0)
   
#check if the input is domain or sub domain.
if [[ $( echo "$domain" | grep -o "\." | wc -l) -gt "1" ]]; then domvar="Sub Domain"; else domvar="Domain"; fi;

errc=$( errcfunc "$domain" );

if [[ -z "$errc" ]];
then cat << ZXCVBNM
<body>
<div id='divClipboard'>
<p><strong>Input:</strong> $domain <br> 
<strong>Resolves to</strong> : $IP <br><br>
No certificate found on port 443. <br>
-https might be configured to use another port. <br>
-an S.S.L. certificate is not/not yet issued for the $domvar.<br></p>
</div>
<hr><br>
<p style='color: red; text-decoration: none; font-family: calibri'><small><<</small><input type='button' style='background:none; border:none; font-size:95%; color: red;' value='back | track' onClick='history.go(-1);'></p>
</body>
</html>
ZXCVBNM
exit 0; 

else 
rawdata0=$(echo | openssl s_client -servername "$domain" -connect "$domain":443 2>/dev/null | openssl x509 -noout -issuer -subject -dates);

Issuer=$( issuerfunc "$rawdata0" );
Target=$( targetfunc "$rawdata0" );
Expiry=$( expiryfunc "$rawdata0" );
Validstart=$( validstartfunc "$rawdata0" );
Daysleft0=$( daysleftfunc "$Expiry" ); fi;
;;

 $tldlist1)
#check if the input is domain or sub domain.
if [[ $( echo "${domain#*.}" | grep -o "\." | wc -l) -gt "1" ]]; then domvar="Sub Domain"; else domvar="Domain"; fi;

errc=$( errcfunc "$domain" );

if [[ -z "$errc" ]];
then cat << ZXCVBNM2
<body>
<div id='divClipboard'>
<p><strong>Input:</strong> $domain <br> 
<strong>Resolves to</strong> : $IP <br><br>
No certificate found on port 443. <br>
-https might be configured to use another port. <br>
-S.S.L. certificate is not/not yet issued for the $domvar.<br></p>
</div>
<hr><br>
<p style='color: red; text-decoration: none; font-family: calibri'><small><<</small><input type='button' style='background:none; border:none; font-size:95%; color: red;' value='back | track' onClick='history.go(-1);'></p>
</body>
</html>
ZXCVBNM2
exit 0; 

else 
rawdata0=$(echo | openssl s_client -servername "$domain" -connect "$domain":443 2>/dev/null | openssl x509 -noout -issuer -subject -dates);

Issuer=$( issuerfunc "$rawdata0" );
Target=$( targetfunc "$rawdata0" );
Expiry=$( expiryfunc "$rawdata0" );
Validstart=$( validstartfunc "$rawdata0" );
Daysleft0=$( daysleftfunc "$Expiry" ); fi;
;;

#throws in errors for non domain input
   *)
cat << EOIDNE
<body>
<div class="code-bg" id="divClipboard">
<p><strong>Input</strong> : $domain<br> <br>
Not a valid domain (<a href='https://en.wikipedia.org/wiki/Fully_qualified_domain_name' target='_blank'> FQDN<a/>) / <a href='https://en.wikipedia.org/wiki/Subdomain' target='_blank'>sub domain</a>!</p>
</div><br><hr><br>
<p style='color: red; text-decoration: none; font-family: calibri'><small><<</small><input type='button' style='background:none; border:none; font-size:95%; color: red;' value='back | track' onClick='history.go(-1);'></p>
</body>
</html>
EOIDNE
exit 0;
;;

esac

if [[ ${Daysleft0:0:1} = "-" ]]; 
then 
leftvar="Cert Expired";
Daysleft="${Daysleft0#*-} days ago."; 
else 
leftvar="Daysleft";
Daysleft="$Daysleft0";
fi;

if [[ "${Target:0:1}" = "*" ]]; then certtype="Yes"; elif [[ $( echo "${Target#*.}" | grep -o "\." | wc -l) -gt "0" ]]; then certtype="No - Cert issued to a sub domain"; else certtype="No - Cert issued to the naked domain"; fi;

if [[ "$domain" != "$Target" ]] && [[ "${Target:0:1}" != "*" ]]; then certloc="<br><strong>Cert Found at</strong> : "$Target" <br><strong>Which Resolves to</strong> : "$( dig a +short "$Target" | sort -u )" <br>"; else true; fi;

cat << EOSSLCCR
<body><div class="code-bg" id="divClipboard"><p><strong>Input ($domvar)</strong> : $domain <br><strong>Resolves to</strong> : $IP <br>
$certloc <br>
<strong>Cert Issuer</strong> : $Issuer <br>
<strong>Wildcard</strong> : $certtype <br>
<strong>Issued For</strong> : $Target<br>
<strong>Validity Start:</strong> : $Validstart <br>
<strong>Expiration</strong> : $Expiry <br>
<strong>$leftvar</strong> : $Daysleft <br><span style='color:grey; font-size:70%;'>( '$leftvar' is calculated based on the server's time and time zone: $(date))</span></p></div>
<hr><p style='color: red; text-decoration: none; font-family: calibri'><small><<</small><input type='button' style='background:none; border:none; font-size:95%; color: red;' value='back | track' onClick='history.go(-1);'></p>
</body>
</html>
EOSSLCCR
fi;

exit 0;
